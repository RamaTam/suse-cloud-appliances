#!/bin/bash
#
# suse_studio_firstboot
#

# Global Variables 
ISODIR="/srv/tftpboot/iso"
REPOSDIR_SLE11="/srv/tftpboot/suse-11.3/repos"
REPOSDIR_SLE12="/srv/tftpboot/suse-12.0/repos"
SMTREPOS="/srv/www/htdocs/repo"
LOGFILE='/var/log/prepare-admin.log'
DEV=0

# Infrastructure for nice output/logging
# --------------------------------------

# Send stdout to LOGFILE
exec > "$LOGFILE" 2>&1

link_smt_repos() {
    echo "Creating symlinks for SMT repos"
    
    # Creating symlinks for SMT repos that were extracted for SLES 11 SP3
    for REPO in SLES11-SP3-{Pool,Updates} SUSE-Cloud-5-{Pool,Updates} SLE11-HAE-SP3-{Pool,Updates}; do
        echo "Creating symlink for $REPO"
        ln -s "$SMTREPOS/\$RCE/$REPO/sle-11-x86_64" $REPOSDIR_SLE11/${REPO/.0/}
    done
    # Creating symlinks for SMT repos that were extracted for SLES 12
    for REPO in SLES12-{Pool,Updates} SLE-12-Cloud-Compute5-{Pool,Updates} SUSE-Enterprise-Storage-1.0-{Pool,Updates}; do
        case $REPO in
        SLES12-Pool) echo "Creating symlink for $REPO"
                     ln -s $SMTREPOS/SUSE/Products/SLE-SERVER/12/x86_64/product/ $REPOSDIR_SLE12/${REPO/.0/}
                     ;; 
        SLES12-Updates) echo "Creating symlink for $REPO"
                        ln -s $SMTREPOS/SUSE/Updates/SLE-SERVER/12/x86_64/update/ $REPOSDIR_SLE12/${REPO/.0/}
                        ;;
        SLE-12-Cloud-Compute5-Pool) echo "Creating symlink for $REPO"
                                    ln -s $SMTREPOS/SUSE/Products/12-Cloud-Compute/5/x86_64/product/ $REPOSDIR_SLE12/${REPO/.0/}
                                    ;;  
        SLE-12-Cloud-Compute5-Updates) echo "Creating symlink for $REPO"
                                       ln -s $SMTREPOS/SUSE/Updates/12-Cloud-Compute/5/x86_64/update/ $REPOSDIR_SLE12/${REPO/.0/}
                                       ;;
        SUSE-Enterprise-Storage-1.0-Pool) echo "Creating symlink for $REPO"
                                          ln -s $SMTREPOS/SUSE/Products/Storage/1.0/x86_64/product/ $REPOSDIR_SLE12/${REPO/.0/}
                                          ;;
        SUSE-Enterprise-Storage-1.0-Updates) echo "Creating symlink for $REPO"
                                             ln -s $SMTREPOS/SUSE/Updates/Storage/1.0/x86_64/update/ $REPOSDIR_SLE12/${REPO/.0/}
                                             ;; 
        *) echo "Invalid option"
           ;; 
        esac
    done

    if [[ $DEV = 1 ]]; then
        for REPO in SUSE-Cloud-5-{Pool,Updates}; do
            rm $REPOSDIR/${REPO/.0/}
        done
    fi
}

setup_local_smt() {
    echo "Extracting SMT repo archives and setting permissions"

    #uncomment for local build
    #mkdir -p /srv/www/htdocs/repo/\$RCE/
    #for archive in /SLES11-SP3-Pool.tar.bz2 /SLES11-SP3-Updates.tar.bz2 /SLE11-HAE-SP3-Pool.tar.bz2 /SLE11-HAE-SP3-Updates.tar.bz2 /SUSE-Cloud-5-Pool.tar.bz2 /SUSE-Cloud-5-Updates.tar.bz2; do
    #    tar -xjvf $archive -C $SMTREPOS\$RCE/
    #    rm $archive
    #done

    # Create repo directories and fake repos for SLES 11 SP3 {Pool,Updates} and SLES 11 SP3 HAE {Pool,Updates}
    # uncomment when you use DEPS ISO
    #for rdir in SLES11-SP3-{Pool,Updates} SLE11-HAE-SP3-{Pool,Updates}; do
    #    mkdir -p /srv/www/htdocs/repo/\$RCE/$rdir/sle-11-x86_64/
    #	createrepo /srv/www/htdocs/repo/\$RCE/$rdir/sle-11-x86_64/
    #done
    chown -R smt:www /srv/www/htdocs/repo/\$RCE/
    chown -R smt:www /srv/www/htdocs/repo/SUSE/

    link_smt_repos
}

setup_local_sles_repos() {
    echo "Adding SLES 11 SP3 repos"

    # mount SLES 11 SP3 ISO and extract contents to the proper location /srv/tftpboot/suse-11.3/install/
    # Removing DEPS ISO (SUSE-CLOUD-4-DEPS-x86_64-GMC-DVD.iso) add in later for DEPS Testing
    for ISO in "SLES-11-SP3-DVD-x86_64-GM-DVD1.iso" "SLE-12-Server-DVD-x86_64-GM-DVD1.iso" "SUSE-SLE12-CLOUD-5-COMPUTE-x86_64-GM-DVD1.iso" "SUSE-CLOUD-5-x86_64-GM-DVD1.iso"; do
        if [[ $ISO == SLES-11-SP3-DVD-x86_64-GM-DVD1.iso ]]; then
            # extraction location for SLES 11 SP3 Media
            xloc="/srv/tftpboot/suse-11.3/install/"
        elif [[ $ISO == SLE-12-Server-DVD-x86_64-GM-DVD1.iso ]]; then
            # extraction location for SLES 12 Media
            xloc="/srv/tftpboot/suse-12.0/install/"
        elif [[ $ISO == SUSE-SLE12-CLOUD-5-COMPUTE-x86_64-GM-DVD1.iso ]]; then
            # extraction location for SLES 12 OpenStack Cloud 5 Media
            xloc="/srv/tftpboot/suse-12.0/repos/SLE12-Cloud-Compute/"
        elif [[ $ISO == SUSE-CLOUD-5-x86_64-GM-DVD1.iso ]]; then
            # extraction location for SLES 11 SP3 OpenStack Cloud 5 Media
            xloc="/srv/tftpboot/suse-11.3/repos/Cloud/"
        else
            # extraction location for Cloud DEPS
            xloc="/srv/tftpboot/repos/Cloud-DEPS/"
        fi
        if [[ ! -d $xloc ]]; then
            mkdir -p $xloc
        else
            echo "directory exists"
        fi
        if [[ ! -a $ISODIR/$ISO ]]; then
            echo "$ISO doesn't exist"
        fi
        if ! mount -o loop $ISODIR/$ISO /mnt; then
            echo "Unable to mount"
        else
            echo "extracting $ISO"
            rsync -av /mnt/ $xloc
            umount /mnt
            echo "extracting $ISO Complete"
        fi
    done
    # Add repos to system 
    zypper ar --refresh file:///srv/tftpboot/suse-11.3/install/ "SLES 11 SP3 Media"
    # Add Cloud DEPS which contains all of the updated rpms for SLES 11 SP3 Updates and SLES 11 SP3 HAE Updates
    # removing the addition of the DEPS Repo. Add back in later for DEPS Testing.
    #zypper ar --refresh file:///srv/tftpboot/repos/Cloud-DEPS/ "Cloud DEPS"
    # Add SLES 11 SP3 Updates repo
    zypper ar --refresh file://$REPOSDIR_SLE11/SLES11-SP3-Updates/ "SLES 11 SP3 Updates"
    zypper --gpg-auto-import-keys refresh
}

setup_local_cloud_repos() {
    echo "Setting up Cloud repos"
    
    if [[ ! -d $REPOSDIR_SLE11/Cloud/ ]]; then
        mkdir -p $REPOSDIR_SLE11/Cloud/
        # create a fake repo so the SUSE Cloud 5 ISO is not required
        echo "creating repodata"
        #createrepo $REPOSDIR_SLE11/Cloud/
    else
        echo "directory exists, creating repodata"
        # create a fake repo so the SUSE Cloud 5 ISO is not required
        #createrepo $REPOSDIR_SLE11/Cloud/
    fi

    # Add repos to local zypper
    zypper ar --refresh file://$REPOSDIR_SLE11/SUSE-Cloud-5-Pool/ "SUSE-Cloud-5-Pool"
    if [[ $DEV = 0 ]]; then
        zypper ar --refresh file://$REPOSDIR_SLE11/SUSE-Cloud-5-Updates/ "SUSE-Cloud-5-Updates"
    else
        echo "Devel Image: Skipping..."
    fi
    zypper --gpg-auto-import-keys refresh
}

install_cloud_admin() {
    zypper up -y --auto-agree-with-licenses --force-resolution
    zypper in -n -y --auto-agree-with-licenses --force-resolution -t pattern cloud_admin
    zypper in -n -y --auto-agree-with-licenses --force-resolution ipmitool
}

main() {
    setup_local_smt
    setup_local_sles_repos
    setup_local_cloud_repos
    install_cloud_admin    
    echo "Clean up"
    # Cleanup firstboot
    mv /etc/init.d/suse_studio_firstboot /tmp/
    exit 0
}

main "$@"
