#!/bin/bash
#
# suse_studio_firstboot
#
#environment variables
export SHELL=/bin/bash
export TERM=linux
export LANG=POSIX

# Global Variables 
ISODIR="/srv/tftpboot/iso"
REPOSDIR="/srv/tftpboot/repos"
SMTREPOS="/srv/www/htdocs/repo/"
IMAGE_TYPE=`grep kiwi_iname /studio/profile`
DIALOG_TITLE=" Prepare SUSE Cloud 3 Admin "
LOGFILE=/var/log/prepare-admin1.log

# Infrastructure for nice output/logging
# --------------------------------------

# Copy stdout to fd 3
exec 3>&1
# Create fd 4 for logfile
exec 4>> "$LOGFILE"

if [ -z "$CROWBAR_VERBOSE" ]; then
    # Set fd 1 and 2 to logfile
    exec 1>&4 2>&1
else
    # Set fd 1 and 2 to logfile (and keep stdout too)
    exec 1> >( tee -a /dev/fd/4 ) 2>&1
fi
# Send summary fd to original stdout
exec 6>&3

use_dialog () {
    [ -z "$CROWBAR_VERBOSE" -a -t 3 -a -x "$(type -p dialog)" ]
}

pipe_show_and_log () {
    if use_dialog; then
        t=$(mktemp)
        cat - > "$t"
        dialog --title "$DIALOG_TITLE" --textbox -- "$t" $(($(wc -l <"$t")+4)) 75 >&3
        rm -f "$t"
        dialog --clear >&3
    fi
    tee -a /dev/fd/3 /dev/fd/4 > /dev/null
}

# Draw a spinner so the user knows something is happening
spinner () {
    local delay=0.75
    local spinstr='/-\|'
    local msg="$@"

    # reset exit handler
    trap "exit" EXIT

    printf "... " >&3
    while [ true ]; do
        local temp=${spinstr#?}
        if use_dialog; then
            printf "\n%s [%c]" "$msg... " "$spinstr" | dialog --title "$DIALOG_TITLE" \
                --keep-window --progressbox 5 70 >&3
        else
            printf "[%c]" "$spinstr" >&3
        fi
        local spinstr=$temp${spinstr%"$temp"}
        sleep $delay
        if ! use_dialog; then
            printf "\b\b\b" >&3
        fi
    done
}

kill_spinner () {
    if [ ! -z "$LAST_SPINNER_PID" ]; then
        kill >/dev/null 2>&1 "$LAST_SPINNER_PID"
        if [ $# -eq 0 ]; then
            printf "\b\b\bdone\n" >&3
        else
            printf "\b\b\b$*\n" >&3
        fi
        unset LAST_SPINNER_PID
    fi
}

kill_spinner_with_failed () {
    kill_spinner "failed"
}

echo_log () {
    echo -e === "$(date '+%F %T %z'): $@" >&4
}

echo_summary () {
    # Also send summary to logfile
    echo_log "$@"

    kill_spinner

    if [ -z "$CROWBAR_VERBOSE" ]; then
        if [ -t 3 ]; then
            echo -n -e "$@" >&3
            if use_dialog; then
                echo -n -e "$@" | dialog --title "$DIALOG_TITLE" --progressbox 8 60 >&3
            fi
            # Use disown to lose job control messages (especially the
            # "Completed" message when spinner will be killed)
            ( spinner "$@" ) & disown
            LAST_SPINNER_PID=$!
        else
            echo -e "$@" >&3
        fi
    else
        echo -e === "$@" >&3
    fi
}

echo_summary_no_spinner () {
    # Also send summary to logfile
    echo_log "$@"

    kill_spinner

    if [ -z "$CROWBAR_VERBOSE" ]; then
        echo -e "$@" >&3
    else
        echo -e === "$@" >&3
    fi
}

die() {
    # Send empty line & error to logfile
    echo >&4
    echo_log "Error: $@"

    kill_spinner_with_failed

    if use_dialog; then
        dialog --title "$DIALOG_TITLE" --clear --msgbox -- "Error: $@" 8 73 >&3
        # avoid triggering two dialogs in a row        
    else
        echo >&3
        echo -e "Error: $@" >&3
    fi

    exit 1
}

link_smt_repos() {
    for REPO in SLES11-SP3-{Pool,Updates} SUSE-Cloud-3.0-{Pool,Updates} SLE11-SMT-SP3-{Pool,Updates} SLE11-HAE-SP3-{Pool,Updates}; do
        ln -s $SMTREPOS\$RCE/$REPO/sle-11-x86_64 $REPOSDIR/${REPO/.0/}
    done
}

setup_local_smt() {
    if [[ $IMAGE_TYPE = *Embedded* ]]; then
        mkdir -p /srv/www/htdocs/repo/\$RCE/
        if cat /srv/tftpboot/txz/SUSE-Cloud-3-repos-03182014.txz.part0* | tar -xJv -C $SMTREPOS; then
            rm /srv/tftpboot/txz/SUSE-Cloud-3-repos-03182014.txz.part0*
        fi
        chown -R smt:www /srv/www/htdocs/repo/\$RCE/
        link_smt_repos
    else
        echo "Standard Image: Setting this up later"
    fi
}

setup_local_sles_repos() {
    mkdir -p /srv/tftpboot/suse-11.3/install/
    # mount SLES 11 SP3 ISO
    mount -o loop $ISODIR/SLES-11-SP3-DVD-x86_64-GM-DVD1.iso /srv/tftpboot/suse-11.3/install
    # Add repos to zypper
    zypper --gpg-auto-import-keys refresh
    zypper ar --refresh file:///srv/tftpboot/suse-11.3/install/ "SLES 11 SP3 Media"
}

setup_local_cloud_repos() {
    mkdir -p $REPOSDIR/Cloud/
    # mount SUSE Cloud 3 ISO
    mount -o loop $ISODIR/SUSE-CLOUD-3-x86_64-GM-DVD1.iso $REPOSDIR/Cloud
    # Add repos to zypper
    zypper --gpg-auto-import-keys refresh
    zypper ar --refresh file://$REPOSDIR/Cloud/ "SUSE-Cloud-3"
    if [[ $IMAGE_TYPE = *Embedded* ]]; then
        zypper ar --refresh file://$REPOSDIR/SUSE-Cloud-3-Updates/ "SUSE-Cloud-3-Updates"
    else
        echo "Standard Image: Setting this up later"
    fi
}

setup_fstab_iso_mounts() {
    echo "$ISODIR/SLES-11-SP3-DVD-x86_64-GM-DVD1.iso    /srv/tftpboot/suse-11.3/install   iso9660   loop,auto   0 0" >> /etc/fstab
    echo "$ISODIR/SUSE-CLOUD-3-x86_64-GM-DVD1.iso    $REPOSDIR/Cloud   iso9660   loop,auto   0 0" >> /etc/fstab
}

setup_local_smt_repo() {
    zypper ar -c -t yast2 iso:/?iso=$ISODIR/SLE-11-SP3-SMT-GM-Media1.iso "SMT for SLES11SP3"
    zypper --gpg-auto-import-keys refresh
    zypper in -y --auto-agree-with-licenses -t pattern SMT lamp_server   
}

install_cloud_admin() {
    if [[ $IMAGE_TYPE = *Embedded* ]]; then
        zypper --gpg-auto-import-keys refresh
        zypper in -y --auto-agree-with-licenses --force-resolution -t pattern cloud_admin
    else
        echo "Standard Image: Installing pattern cloud_admin later"
    fi
}

main() {
    echo_summary "Extracting SMT repos and preparing for use..."
    setup_local_smt
    echo_summary "Adding local SLES 11 SP3 respos"
    setup_local_sles_repos
    echo_summary "Adding local SUSE Cloud repos"
    setup_local_cloud_repos
    echo_summary "Adding entries in fstab"
    setup_fstab_iso_mounts
    echo_sumamry "Preparing and Installing SMT"
    setup_local_smt_repo
    echo_summary "Installing SUSE Cloud Admin Software..."
    install_cloud_admin    
    echo_summary "Preparation #1 Complete!"
    kill_spinner
    exit 0
}

main "$@"
