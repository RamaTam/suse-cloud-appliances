#!/bin/bash
#
#
# Author: Cameron Seader <cs@suse.com>
#
# I have modified this script to accomodate being outside the firewall and 
# easily setting everything up which is required from the deployment guide.
# -Cameron Seader
#

#environment variables
export SHELL=/bin/bash
export TERM=linux
export LANG=POSIX

#variables
DIALOG_TITLE=" Prepare SUSE Cloud 3 Admin "
repo_dir="/srv/www/htdocs/repo/"
txz_dir="/srv/tftpboot/txz"
LOGFILE=/var/log/prepare-admin.log

# Infrastructure for nice output/logging
# --------------------------------------

# Copy stdout to fd 3
exec 3>&1
# Create fd 4 for logfile
exec 4>> "$LOGFILE"

if [ -z "$CROWBAR_VERBOSE" ]; then
    # Set fd 1 and 2 to logfile
    exec 1>&4 2>&1
else
    # Set fd 1 and 2 to logfile (and keep stdout too)
    exec 1> >( tee -a /dev/fd/4 ) 2>&1
fi
# Send summary fd to original stdout
exec 6>&3

use_dialog () {
    [ -z "$CROWBAR_VERBOSE" -a -t 3 -a -x "$(type -p dialog)" ]
}

pipe_show_and_log () {
    if use_dialog; then
        t=$(mktemp)
        cat - > "$t"
        dialog --title "$DIALOG_TITLE" --textbox -- "$t" $(($(wc -l <"$t")+4)) 75 >&3
        rm -f "$t"
        dialog --clear >&3
    fi
    tee -a /dev/fd/3 /dev/fd/4 > /dev/null
}

# Draw a spinner so the user knows something is happening
spinner () {
    local delay=0.75
    local spinstr='/-\|'
    local msg="$@"

    # reset exit handler
    trap "exit" EXIT

    printf "... " >&3
    while [ true ]; do
        local temp=${spinstr#?}
        if use_dialog; then
            printf "\n%s [%c]" "$msg... " "$spinstr" | dialog --title "$DIALOG_TITLE" \
                --keep-window --progressbox 5 70 >&3
        else
            printf "[%c]" "$spinstr" >&3
        fi
        local spinstr=$temp${spinstr%"$temp"}
        sleep $delay
        if ! use_dialog; then
            printf "\b\b\b" >&3
        fi
    done
}

kill_spinner () {
    if [ ! -z "$LAST_SPINNER_PID" ]; then
        kill >/dev/null 2>&1 "$LAST_SPINNER_PID"
        if [ $# -eq 0 ]; then
            printf "\b\b\bdone\n" >&3
        else
            printf "\b\b\b$*\n" >&3
        fi
        unset LAST_SPINNER_PID
    fi
}

kill_spinner_with_failed () {
    kill_spinner "failed"
}

echo_log () {
    echo -e === "$(date '+%F %T %z'): $@" >&4
}

echo_summary () {
    # Also send summary to logfile
    echo_log "$@"

    kill_spinner

    if [ -z "$CROWBAR_VERBOSE" ]; then
        if [ -t 3 ]; then
            echo -n -e "$@" >&3
            if use_dialog; then
                echo -n -e "$@" | dialog --title "$DIALOG_TITLE" --progressbox 8 60 >&3
            fi
            # Use disown to lose job control messages (especially the
            # "Completed" message when spinner will be killed)
            ( spinner "$@" ) & disown
            LAST_SPINNER_PID=$!
        else
            echo -e "$@" >&3
        fi
    else
        echo -e === "$@" >&3
    fi
}

echo_summary_no_spinner () {
    # Also send summary to logfile
    echo_log "$@"

    kill_spinner

    if [ -z "$CROWBAR_VERBOSE" ]; then
        echo -e "$@" >&3
    else
        echo -e === "$@" >&3
    fi
}

die() {
    # Send empty line & error to logfile
    echo >&4
    echo_log "Error: $@"

    kill_spinner_with_failed

    if use_dialog; then
        dialog --title "$DIALOG_TITLE" --clear --msgbox -- "Error: $@" 8 73 >&3
        # avoid triggering two dialogs in a row        
    else
        echo >&3
        echo -e "Error: $@" >&3
    fi

    exit 1
}

setup_local_smt() {
  if [ -d "$txz_dir" ]; then
  mkdir -p /srv/www/htdocs/repo/\$RCE/  
    if cat /srv/tftpboot/txz/SUSE-Cloud-3-repos-03182014.txz.part0* | tar -xJv -C $repo_dir; then
       rm /srv/tftpboot/txz/SUSE-Cloud-3-repos-03182014.txz.part0*
    fi
  chown -R smt:www /srv/www/htdocs/repo/\$RCE/
  else 
  echo "$txz_dir does not exist. Must be Standard Image"
  fi 
  smt-ncc-sync
  
}

link_smt_repos() {
  for REPO in SLES11-SP3-{Pool,Updates} SUSE-Cloud-3.0-{Pool,Updates} SLE11-SMT-SP3-{Pool,Updates} SLE11-HAE-SP3-{Pool,Updates}; do
    ln -s $repo_dir\$RCE/$REPO/sle-11-x86_64 /srv/tftpboot/repos/${REPO/.0/}
  done
}

mirror_smt_repos() {
  #smt repos -e SUSE-Cloud-3.0-Pool 
  #smt repos -e SUSE-Cloud-3.0-Updates 
  #smt repos -e SLES11-SP3-Pool sle-11-x86_64
  #smt repos -e SLES11-SP3-Updates sle-11-x86_64
  
  for REPO in SLES11-SP3-{Pool,Updates} SUSE-Cloud-3.0-{Pool,Updates} SLE11-SMT-SP3-{Pool,Updates} SLE11-HAE-SP3-{Pool,Updates}; do
    smt repos -e $REPO sle-11-x86_64
  done
  
  echo -e 'The system will now mirror any remaining packages from the included repos\n'
  
  smt-mirror
  [[ $? -ne 0 ]] && die "Failed to Mirror repos"
}

remove_ncc_repos() {
  for REPO in SLES11-SP3-{Pool,Updates} SUSE-Cloud-3.0-{Pool,Updates} SLE11-SMT-SP3-{Pool,Updates}; do
      zypper mr -d $REPO
  done
}

main() {

  echo_summary "Setup SMT repos"
  setup_local_smt
  if [ -d "$txz_dir" ]; then
  echo_summary "Checking SMT repos for updated packages" 
  else    
  echo_summary "Mirroring SMT repos... This will take awhile"
  fi
  mirror_smt_repos
  echo_summary "Linking SMT repos properly"
  link_smt_repos
      
  echo_summary "Disabling remote repos" 
  remove_ncc_repos 
  
  echo_summary "Clean up"
  insserv setup-crowbar -r
  mv /etc/init.d/suse_studio_firstboot /tmp/
  
  echo_summary "Preparation Complete!"
  kill_spinner
  
  exit 0
}

main "$@"
